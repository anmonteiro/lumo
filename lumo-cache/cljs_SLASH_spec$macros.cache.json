["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",["~$cat","~$*","~$or","~$assert","~$merge","~$keys","~$+","~$resolve","~$and","~$def"]],"~:name","~$cljs.spec$macros","~:imports",null,"~:requires",["^ ","~$cljs.core","^A","~$walk","~$clojure.walk","~$cljs.analyzer.api","^D","~$cljs.env","^E","~$gen","~$cljs.spec.impl.gen","~$ana","~$cljs.analyzer","~$env","^E","^G","^G","^I","^I","~$c","^A","~$str","~$clojure.string","^L","^L","^C","^C"],"~:uses",["^ ","^:","^D"],"~:defs",["^ ","~$res",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","~$cljs.spec","~:line",36,"~:column",8,"~:end-line",36,"~:end-column",11,"~:private",true,"~:arglists",["~#list",["~$quote",["^Z",[["^J","~$form"]]]]]],"^X",true,"^=","~$cljs.spec$macros/res","~:variadic",false,"^R","cljs/spec.cljc","^W",11,"~:method-params",["^Z",[["^J","^10"]]],"~:protocol-impl",null,"~:arglists-meta",["^Z",[null,null]],"^U",1,"^T",36,"^V",36,"~:max-fixed-arity",2,"~:fn-var",true,"^Y",["^Z",["^[",["^Z",[["^J","^10"]]]]]],"~$&",["^ ","^P",null,"^Q",["^ ","^R","^S","^W",12,"~:top-fn",["^ ","^12",true,"^16",3,"^13",[["^Z",["~$&form","~$&env","~$re","~$preds"]]],"^Y",["^Z",[["^19","^1:","^1;","~$&","^1<"]]],"^15",["^Z",[null]]],"^U",11,"^T",318,"~:macro",true,"^V",318,"^Y",["^Z",["^[",["^Z",[["^1;","~$&","^1<"]]]]],"~:doc","takes a regex op re, and predicates. Returns a regex-op that consumes\n  input as per re but subjects the resulting value to the\n  conjunction of the predicates, and any conforming they might perform."],"^=","~$cljs.spec$macros/&","^12",true,"^R","cljs/spec.cljc","^W",12,"^18",["^ ","^12",true,"^16",3,"^13",[["^Z",["^19","^1:","^1;","^1<"]]],"^Y",["^Z",[["^19","^1:","^1;","~$&","^1<"]]],"^15",["^Z",[null]]],"^13",[["^Z",["^19","^1:","^1;","^1<"]]],"^14",null,"^15",["^Z",[null]],"^U",1,"^T",318,"^1=",true,"^V",318,"^16",3,"^17",true,"^Y",["^Z",[["^19","^1:","^1;","~$&","^1<"]]],"^1>","takes a regex op re, and predicates. Returns a regex-op that consumes\n  input as per re but subjects the resulting value to the\n  conjunction of the predicates, and any conforming they might perform."],"~$fspec",["^ ","^P",null,"^Q",["^ ","^R","^S","^W",16,"^18",["^ ","^12",true,"^16",2,"^13",[["^Z",["^19","^1:",["^ ","~:keys",["~$args","~$ret","~$fn","^F"]]]]],"^Y",["^Z",[["^19","^1:","~$&",["^ ","^1A",["^1B","^1C","^1D","^F"]]]]],"^15",["^Z",[null]]],"^U",11,"^T",334,"^1=",true,"^V",334,"^Y",["^Z",["^[",["^Z",[["~$&",["^ ","^1A",["^1B","^1C","^1D","^F"]]]]]]],"^1>","takes :args :ret and (optional) :fn kwargs whose values are preds\n  and returns a spec whose conform/explain take a fn and validates it\n  using generative testing. The conformed value is always the fn itself.\n\n  See 'fdef' for a single operation that creates an fspec and\n  registers it, as well as a full description of :args, :ret and :fn\n\n  fspecs can generate functions that validate the arguments and\n  fabricate a return value compliant with the :ret spec, ignoring\n  the :fn spec if present.\n\n  Optionally takes :gen generator-fn, which must be a fn of no args\n  that returns a test.check generator."],"^=","~$cljs.spec$macros/fspec","^12",true,"^R","cljs/spec.cljc","^W",16,"^18",["^ ","^12",true,"^16",2,"^13",[["^Z",["^19","^1:",["^ ","^1A",["^1B","^1C","^1D","^F"]]]]],"^Y",["^Z",[["^19","^1:","~$&",["^ ","^1A",["^1B","^1C","^1D","^F"]]]]],"^15",["^Z",[null]]],"^13",[["^Z",["^19","^1:",["^ ","^1A",["^1B","^1C","^1D","^F"]]]]],"^14",null,"^15",["^Z",[null]],"^U",1,"^T",334,"^1=",true,"^V",334,"^16",2,"^17",true,"^Y",["^Z",[["^19","^1:","~$&",["^ ","^1A",["^1B","^1C","^1D","^F"]]]]],"^1>","takes :args :ret and (optional) :fn kwargs whose values are preds\n  and returns a spec whose conform/explain take a fn and validates it\n  using generative testing. The conformed value is always the fn itself.\n\n  See 'fdef' for a single operation that creates an fspec and\n  registers it, as well as a full description of :args, :ret and :fn\n\n  fspecs can generate functions that validate the arguments and\n  fabricate a return value compliant with the :ret spec, ignoring\n  the :fn spec if present.\n\n  Optionally takes :gen generator-fn, which must be a fn of no args\n  that returns a test.check generator."],"~$every",["^ ","^P",null,"^Q",["^ ","^R","^S","^W",16,"^18",["^ ","^12",true,"^16",3,"^13",[["^Z",["^19","^1:","~$pred",["^ ","~:as","~$opts","^1A",["~$into","~$kind","~$count","~$max-count","~$min-count","~$distinct","~$gen-max","~$gen-into","^F"]]]]],"^Y",["^Z",[["^19","^1:","^1G","~$&",["^ ","^1H","^1I","^1A",["^1J","^1K","^1L","^1M","^1N","^1O","^1P","^1Q","^F"]]]]],"^15",["^Z",[null]]],"^U",11,"^T",197,"^1=",true,"^V",197,"^Y",["^Z",["^[",["^Z",[["^1G","~$&",["^ ","^1H","^1I","^1A",["^1J","^1K","^1L","^1M","^1N","^1O","^1P","^1Q","^F"]]]]]]],"^1>","takes a pred and validates collection elements against that pred.\n\n  Note that 'every' does not do exhaustive checking, rather it samples\n  *coll-check-limit* elements. Nor (as a result) does it do any\n  conforming of elements. 'explain' will report at most *coll-error-limit*\n  problems.  Thus 'every' should be suitable for potentially large\n  collections.\n\n  Takes several kwargs options that further constrain the collection:\n\n  :kind - a pred/spec that the collection type must satisfy, e.g. vector?\n          (default nil) Note that if :kind is specified and :into is\n          not, this pred must generate in order for every to generate.\n  :count - specifies coll has exactly this count (default nil)\n  :min-count, :max-count - coll has count (<= min-count count max-count) (defaults nil)\n  :distinct - all the elements are distinct (default nil)\n\n  And additional args that control gen\n\n  :gen-max - the maximum coll size to generate (default 20)\n  :into - one of [], (), {}, #{} - the default collection to generate into\n      (default same as :kind if supplied, else []\n\n  Optionally takes :gen generator-fn, which must be a fn of no args that\n  returns a test.check generator\n\n  See also - coll-of, every-kv\n"],"^=","~$cljs.spec$macros/every","^12",true,"^R","cljs/spec.cljc","^W",16,"^18",["^ ","^12",true,"^16",3,"^13",[["^Z",["^19","^1:","^1G",["^ ","^1H","^1I","^1A",["^1J","^1K","^1L","^1M","^1N","^1O","^1P","^1Q","^F"]]]]],"^Y",["^Z",[["^19","^1:","^1G","~$&",["^ ","^1H","^1I","^1A",["^1J","^1K","^1L","^1M","^1N","^1O","^1P","^1Q","^F"]]]]],"^15",["^Z",[null]]],"^13",[["^Z",["^19","^1:","^1G",["^ ","^1H","^1I","^1A",["^1J","^1K","^1L","^1M","^1N","^1O","^1P","^1Q","^F"]]]]],"^14",null,"^15",["^Z",[null]],"^U",1,"^T",197,"^1=",true,"^V",197,"^16",3,"^17",true,"^Y",["^Z",[["^19","^1:","^1G","~$&",["^ ","^1H","^1I","^1A",["^1J","^1K","^1L","^1M","^1N","^1O","^1P","^1Q","^F"]]]]],"^1>","takes a pred and validates collection elements against that pred.\n\n  Note that 'every' does not do exhaustive checking, rather it samples\n  *coll-check-limit* elements. Nor (as a result) does it do any\n  conforming of elements. 'explain' will report at most *coll-error-limit*\n  problems.  Thus 'every' should be suitable for potentially large\n  collections.\n\n  Takes several kwargs options that further constrain the collection:\n\n  :kind - a pred/spec that the collection type must satisfy, e.g. vector?\n          (default nil) Note that if :kind is specified and :into is\n          not, this pred must generate in order for every to generate.\n  :count - specifies coll has exactly this count (default nil)\n  :min-count, :max-count - coll has count (<= min-count count max-count) (defaults nil)\n  :distinct - all the elements are distinct (default nil)\n\n  And additional args that control gen\n\n  :gen-max - the maximum coll size to generate (default 20)\n  :into - one of [], (), {}, #{} - the default collection to generate into\n      (default same as :kind if supplied, else []\n\n  Optionally takes :gen generator-fn, which must be a fn of no args that\n  returns a test.check generator\n\n  See also - coll-of, every-kv\n"],"~$keys*",["^ ","^P",null,"^Q",["^ ","^R","^S","^W",16,"^18",["^ ","^12",true,"^16",2,"^13",[["^Z",["^19","^1:","~$kspecs"]]],"^Y",["^Z",[["^19","^1:","~$&","^1T"]]],"^15",["^Z",[null]]],"^U",11,"^T",403,"^1=",true,"^V",403,"^Y",["^Z",["^[",["^Z",[["~$&","^1T"]]]]],"^1>","takes the same arguments as spec/keys and returns a regex op that matches sequences of key/values,\n  converts them into a map, and conforms that map with a corresponding\n  spec/keys call:\n\n  user=> (s/conform (s/keys :req-un [::a ::c]) {:a 1 :c 2})\n  {:a 1, :c 2}\n  user=> (s/conform (s/keys* :req-un [::a ::c]) [:a 1 :c 2])\n  {:a 1, :c 2}\n\n  the resulting regex op can be composed into a larger regex:\n\n  user=> (s/conform (s/cat :i1 integer? :m (s/keys* :req-un [::a ::c]) :i2 integer?) [42 :a 1 :c 2 :d 4 99])\n  {:i1 42, :m {:a 1, :c 2, :d 4}, :i2 99}"],"^=","~$cljs.spec$macros/keys*","^12",true,"^R","cljs/spec.cljc","^W",16,"^18",["^ ","^12",true,"^16",2,"^13",[["^Z",["^19","^1:","^1T"]]],"^Y",["^Z",[["^19","^1:","~$&","^1T"]]],"^15",["^Z",[null]]],"^13",[["^Z",["^19","^1:","^1T"]]],"^14",null,"^15",["^Z",[null]],"^U",1,"^T",403,"^1=",true,"^V",403,"^16",2,"^17",true,"^Y",["^Z",[["^19","^1:","~$&","^1T"]]],"^1>","takes the same arguments as spec/keys and returns a regex op that matches sequences of key/values,\n  converts them into a map, and conforms that map with a corresponding\n  spec/keys call:\n\n  user=> (s/conform (s/keys :req-un [::a ::c]) {:a 1 :c 2})\n  {:a 1, :c 2}\n  user=> (s/conform (s/keys* :req-un [::a ::c]) [:a 1 :c 2])\n  {:a 1, :c 2}\n\n  the resulting regex op can be composed into a larger regex:\n\n  user=> (s/conform (s/cat :i1 integer? :m (s/keys* :req-un [::a ::c]) :i2 integer?) [42 :a 1 :c 2 :d 4 99])\n  {:i1 42, :m {:a 1, :c 2, :d 4}, :i2 99}"],"~$speced-vars",["^ ","^P",null,"^Q",["^ ","^R","^S","^T",364,"^U",7,"^V",364,"^W",18,"^Y",["^Z",["^[",["^Z",[[]]]]]],"^=","~$cljs.spec$macros/speced-vars","^12",false,"^R","cljs/spec.cljc","^W",18,"^13",["^Z",[[]]],"^14",null,"^15",["^Z",[null,null]],"^U",1,"^T",364,"^V",364,"^16",0,"^17",true,"^Y",["^Z",["^[",["^Z",[[]]]]]],"~$registry-ref",["^ ","^=","~$cljs.spec$macros/registry-ref","^R","cljs/spec.cljc","^T",19,"^U",1,"^V",19,"^W",22,"^Q",["^ ","^R","^S","^T",19,"^U",10,"^V",19,"^W",22]],"~$nilable",["^ ","^P",null,"^Q",["^ ","^R","^S","^T",422,"^U",11,"^V",422,"^W",18,"^1=",true,"^Y",["^Z",["^[",["^Z",[["^1G"]]]]],"^1>","returns a spec that accepts nil and values satisfiying pred"],"^=","~$cljs.spec$macros/nilable","^12",false,"^R","cljs/spec.cljc","^W",18,"^13",["^Z",[["^19","^1:","^1G"]]],"^14",null,"^15",["^Z",[null,null]],"^U",1,"^T",422,"^1=",true,"^V",422,"^16",3,"^17",true,"^Y",["^Z",["^[",["^Z",[["^1G"]]]]],"^1>","returns a spec that accepts nil and values satisfiying pred"],"~$unfn",["^ ","^P",null,"^Q",["^ ","^R","^S","^T",28,"^U",8,"^V",28,"^W",12,"^X",true,"^Y",["^Z",["^[",["^Z",[["~$expr"]]]]]],"^X",true,"^=","~$cljs.spec$macros/unfn","^12",false,"^R","cljs/spec.cljc","^W",12,"^13",["^Z",[["^21"]]],"^14",null,"^15",["^Z",[null,null]],"^U",1,"^T",28,"^V",28,"^16",1,"^17",true,"^Y",["^Z",["^[",["^Z",[["^21"]]]]]],"~$coll-of",["^ ","^P",null,"^Q",["^ ","^R","^S","^W",18,"^18",["^ ","^12",true,"^16",3,"^13",[["^Z",["^19","^1:","^1G","^1I"]]],"^Y",["^Z",[["^19","^1:","^1G","~$&","^1I"]]],"^15",["^Z",[null]]],"^U",11,"^T",240,"^1=",true,"^V",240,"^Y",["^Z",["^[",["^Z",[["^1G","~$&","^1I"]]]]],"^1>","Returns a spec for a collection of items satisfying pred. Unlike\n  generator will fill an empty init-coll.\n\n  Same options as 'every'. conform will produce a collection\n  corresponding to :into if supplied, else will match the input collection,\n  avoiding rebuilding when possible.\n\n  Same options as 'every'.\n\n  See also - every, map-of"],"^=","~$cljs.spec$macros/coll-of","^12",true,"^R","cljs/spec.cljc","^W",18,"^18",["^ ","^12",true,"^16",3,"^13",[["^Z",["^19","^1:","^1G","^1I"]]],"^Y",["^Z",[["^19","^1:","^1G","~$&","^1I"]]],"^15",["^Z",[null]]],"^13",[["^Z",["^19","^1:","^1G","^1I"]]],"^14",null,"^15",["^Z",[null]],"^U",1,"^T",240,"^1=",true,"^V",240,"^16",3,"^17",true,"^Y",["^Z",[["^19","^1:","^1G","~$&","^1I"]]],"^1>","Returns a spec for a collection of items satisfying pred. Unlike\n  generator will fill an empty init-coll.\n\n  Same options as 'every'. conform will produce a collection\n  corresponding to :into if supplied, else will match the input collection,\n  avoiding rebuilding when possible.\n\n  Same options as 'every'.\n\n  See also - every, map-of"],"^5",["^ ","^P",null,"^Q",["^ ","^R","^S","^W",14,"^18",["^ ","^12",true,"^16",2,"^13",[["^Z",["^19","^1:","~$key-pred-forms"]]],"^Y",["^Z",[["^19","^1:","~$&","^25"]]],"^15",["^Z",[null]]],"^U",11,"^T",302,"^1=",true,"^V",302,"^Y",["^Z",["^[",["^Z",[["~$&","^25"]]]]],"^1>","Takes key+pred pairs, e.g.\n\n  (s/cat :e even? :o odd?)\n\n  Returns a regex op that matches (all) values in sequence, returning a map\n  containing the keys of each pred and the corresponding value."],"^=","~$cljs.spec$macros/cat","^12",true,"^R","cljs/spec.cljc","^W",14,"^18",["^ ","^12",true,"^16",2,"^13",[["^Z",["^19","^1:","^25"]]],"^Y",["^Z",[["^19","^1:","~$&","^25"]]],"^15",["^Z",[null]]],"^13",[["^Z",["^19","^1:","^25"]]],"^14",null,"^15",["^Z",[null]],"^U",1,"^T",302,"^1=",true,"^V",302,"^16",2,"^17",true,"^Y",["^Z",[["^19","^1:","~$&","^25"]]],"^1>","Takes key+pred pairs, e.g.\n\n  (s/cat :e even? :o odd?)\n\n  Returns a regex op that matches (all) values in sequence, returning a map\n  containing the keys of each pred and the corresponding value."],"~$*",["^ ","^P",null,"^Q",["^ ","^R","^S","^T",267,"^U",11,"^V",267,"^W",12,"^1=",true,"^Y",["^Z",["^[",["^Z",[["~$pred-form"]]]]],"^1>","Returns a regex op that matches zero or more values matching\n  pred. Produces a vector of matches iff there is at least one match"],"^=","~$cljs.spec$macros/*","^12",false,"^R","cljs/spec.cljc","^W",12,"^13",["^Z",[["^19","^1:","^27"]]],"^14",null,"^15",["^Z",[null,null]],"^U",1,"^T",267,"^1=",true,"^V",267,"^16",3,"^17",true,"^Y",["^Z",["^[",["^Z",[["^27"]]]]],"^1>","Returns a regex op that matches zero or more values matching\n  pred. Produces a vector of matches iff there is at least one match"],"~$every-kv",["^ ","^P",null,"^Q",["^ ","^R","^S","^W",19,"^18",["^ ","^12",true,"^16",4,"^13",[["^Z",["^19","^1:","~$kpred","~$vpred","^1I"]]],"^Y",["^Z",[["^19","^1:","^2:","^2;","~$&","^1I"]]],"^15",["^Z",[null]]],"^U",11,"^T",230,"^1=",true,"^V",230,"^Y",["^Z",["^[",["^Z",[["^2:","^2;","~$&","^1I"]]]]],"^1>","like 'every' but takes separate key and val preds and works on associative collections.\n\n  Same options as 'every', :into defaults to {}\n\n  See also - map-of"],"^=","~$cljs.spec$macros/every-kv","^12",true,"^R","cljs/spec.cljc","^W",19,"^18",["^ ","^12",true,"^16",4,"^13",[["^Z",["^19","^1:","^2:","^2;","^1I"]]],"^Y",["^Z",[["^19","^1:","^2:","^2;","~$&","^1I"]]],"^15",["^Z",[null]]],"^13",[["^Z",["^19","^1:","^2:","^2;","^1I"]]],"^14",null,"^15",["^Z",[null]],"^U",1,"^T",230,"^1=",true,"^V",230,"^16",4,"^17",true,"^Y",["^Z",[["^19","^1:","^2:","^2;","~$&","^1I"]]],"^1>","like 'every' but takes separate key and val preds and works on associative collections.\n\n  Same options as 'every', :into defaults to {}\n\n  See also - map-of"],"~$int-in",["^ ","^P",null,"^Q",["^ ","^R","^S","^T",439,"^U",11,"^V",439,"^W",17,"^1=",true,"^Y",["^Z",["^[",["^Z",[["~$start","~$end"]]]]],"^1>","Returns a spec that validates longs in the range from start\n  (inclusive) to end (exclusive)."],"^=","~$cljs.spec$macros/int-in","^12",false,"^R","cljs/spec.cljc","^W",17,"^13",["^Z",[["^19","^1:","^2>","^2?"]]],"^14",null,"^15",["^Z",[null,null]],"^U",1,"^T",439,"^1=",true,"^V",439,"^16",4,"^17",true,"^Y",["^Z",["^[",["^Z",[["^2>","^2?"]]]]],"^1>","Returns a spec that validates longs in the range from start\n  (inclusive) to end (exclusive)."],"~$alt",["^ ","^P",null,"^Q",["^ ","^R","^S","^W",14,"^18",["^ ","^12",true,"^16",2,"^13",[["^Z",["^19","^1:","^25"]]],"^Y",["^Z",[["^19","^1:","~$&","^25"]]],"^15",["^Z",[null]]],"^U",11,"^T",285,"^1=",true,"^V",285,"^Y",["^Z",["^[",["^Z",[["~$&","^25"]]]]],"^1>","Takes key+pred pairs, e.g.\n\n  (s/alt :even even? :small #(< % 42))\n\n  Returns a regex op that returns a map entry containing the key of the\n  first matching pred and the corresponding value. Thus the\n  'key' and 'val' functions can be used to refer generically to the\n  components of the tagged return."],"^=","~$cljs.spec$macros/alt","^12",true,"^R","cljs/spec.cljc","^W",14,"^18",["^ ","^12",true,"^16",2,"^13",[["^Z",["^19","^1:","^25"]]],"^Y",["^Z",[["^19","^1:","~$&","^25"]]],"^15",["^Z",[null]]],"^13",[["^Z",["^19","^1:","^25"]]],"^14",null,"^15",["^Z",[null]],"^U",1,"^T",285,"^1=",true,"^V",285,"^16",2,"^17",true,"^Y",["^Z",[["^19","^1:","~$&","^25"]]],"^1>","Takes key+pred pairs, e.g.\n\n  (s/alt :even even? :small #(< % 42))\n\n  Returns a regex op that returns a map entry containing the key of the\n  first matching pred and the corresponding value. Thus the\n  'key' and 'val' functions can be used to refer generically to the\n  components of the tagged return."],"~$->sym",["^ ","^P",null,"^Q",["^ ","^R","^S","^T",21,"^U",8,"^V",21,"^W",13,"^X",true,"^Y",["^Z",["^[",["^Z",[["~$x"]]]]],"^1>","Returns a symbol from a symbol or var"],"^X",true,"^=","~$cljs.spec$macros/->sym","^12",false,"^R","cljs/spec.cljc","^W",13,"^13",["^Z",[["~$x"]]],"^14",null,"^15",["^Z",[null,null]],"^U",1,"^T",21,"^V",21,"^16",1,"^17",true,"^Y",["^Z",["^[",["^Z",[["~$x"]]]]],"^1>","Returns a symbol from a symbol or var"],"^6",["^ ","^P",null,"^Q",["^ ","^R","^S","^W",13,"^18",["^ ","^12",true,"^16",2,"^13",[["^Z",["^19","^1:","^25"]]],"^Y",["^Z",[["^19","^1:","~$&","^25"]]],"^15",["^Z",[null]]],"^U",11,"^T",170,"^1=",true,"^V",170,"^Y",["^Z",["^[",["^Z",[["~$&","^25"]]]]],"^1>","Takes key+pred pairs, e.g.\n\n  (s/or :even even? :small #(< % 42))\n\n  Returns a destructuring spec that returns a map entry containing the\n  key of the first matching pred and the corresponding value. Thus the\n  'key' and 'val' functions can be used to refer generically to the\n  components of the tagged return."],"^=","~$cljs.spec$macros/or","^12",true,"^R","cljs/spec.cljc","^W",13,"^18",["^ ","^12",true,"^16",2,"^13",[["^Z",["^19","^1:","^25"]]],"^Y",["^Z",[["^19","^1:","~$&","^25"]]],"^15",["^Z",[null]]],"^13",[["^Z",["^19","^1:","^25"]]],"^14",null,"^15",["^Z",[null]],"^U",1,"^T",170,"^1=",true,"^V",170,"^16",2,"^17",true,"^Y",["^Z",[["^19","^1:","~$&","^25"]]],"^1>","Takes key+pred pairs, e.g.\n\n  (s/or :even even? :small #(< % 42))\n\n  Returns a destructuring spec that returns a map entry containing the\n  key of the first matching pred and the corresponding value. Thus the\n  'key' and 'val' functions can be used to refer generically to the\n  components of the tagged return."],"~$_speced_vars",["^ ","^=","~$cljs.spec$macros/_speced_vars","^R","cljs/spec.cljc","^T",362,"^U",1,"^V",362,"^W",28,"^X",true,"^Q",["^ ","^R","^S","^T",362,"^U",16,"^V",362,"^W",28,"^X",true]],"~$exercise-fn",["^ ","^P",null,"^Q",["^ ","^R","^S","^W",22,"^18",["^ ","^12",false,"^16",5,"^13",["^Z",[["^19","^1:","~$sym"],["^19","^1:","^2I","~$n"],["^19","^1:","^2I","~$n","^1@"]]],"^Y",["^Z",[["^19","^1:","^2I"],["^19","^1:","^2I","~$n"],["^19","^1:","^2I","~$n","^1@"]]],"^15",["^Z",[null,null,null]]],"^U",11,"^T",472,"^1=",true,"^V",472,"^Y",["^Z",["^[",["^Z",[["^2I"],["^2I","~$n"],["^2I","~$n","^1@"]]]]],"^1>","exercises the fn named by sym (a symbol) by applying it to\n  n (default 10) generated samples of its args spec. When fspec is\n  supplied its arg spec is used, and sym-or-f can be a fn.  Returns a\n  sequence of tuples of [args ret]. "],"^=","~$cljs.spec$macros/exercise-fn","^12",false,"^R","cljs/spec.cljc","^W",22,"^18",["^ ","^12",false,"^16",5,"^13",["^Z",[["^19","^1:","^2I"],["^19","^1:","^2I","~$n"],["^19","^1:","^2I","~$n","^1@"]]],"^Y",["^Z",[["^19","^1:","^2I"],["^19","^1:","^2I","~$n"],["^19","^1:","^2I","~$n","^1@"]]],"^15",["^Z",[null,null,null]]],"^13",["^Z",[["^19","^1:","^2I"],["^19","^1:","^2I","~$n"],["^19","^1:","^2I","~$n","^1@"]]],"^14",null,"^15",["^Z",[null,null,null]],"^U",1,"^T",472,"^1=",true,"^V",472,"^16",5,"^17",true,"^Y",["^Z",[["^19","^1:","^2I"],["^19","^1:","^2I","~$n"],["^19","^1:","^2I","~$n","^1@"]]],"^1>","exercises the fn named by sym (a symbol) by applying it to\n  n (default 10) generated samples of its args spec. When fspec is\n  supplied its arg spec is used, and sym-or-f can be a fn.  Returns a\n  sequence of tuples of [args ret]. "],"~$multi-spec",["^ ","^P",null,"^Q",["^ ","^R","^S","^T",81,"^U",11,"^V",81,"^W",21,"^1=",true,"^Y",["^Z",["^[",["^Z",[["~$mm","~$retag"]]]]],"^1>","Takes the name of a spec/predicate-returning multimethod and a\n  tag-restoring keyword or fn (retag).  Returns a spec that when\n  conforming or explaining data will pass it to the multimethod to get\n  an appropriate spec. You can e.g. use multi-spec to dynamically and\n  extensibly associate specs with 'tagged' data (i.e. data where one\n  of the fields indicates the shape of the rest of the structure).\n\n  (defmulti mspec :tag)\n\n  The methods should ignore their argument and return a predicate/spec:\n  (defmethod mspec :int [_] (s/keys :req-un [::tag ::i]))\n\n  retag is used during generation to retag generated values with\n  matching tags. retag can either be a keyword, at which key the\n  dispatch-tag will be assoc'ed, or a fn of generated value and\n  dispatch-tag that should return an appropriately retagged value.\n\n  Note that because the tags themselves comprise an open set,\n  the tag key spec cannot enumerate the values, but can e.g.\n  test for keyword?.\n\n  Note also that the dispatch values of the multimethod will be\n  included in the path, i.e. in reporting and gen overrides, even\n  though those values are not evident in the spec.\n"],"^=","~$cljs.spec$macros/multi-spec","^12",false,"^R","cljs/spec.cljc","^W",21,"^13",["^Z",[["^19","^1:","^2L","^2M"]]],"^14",null,"^15",["^Z",[null,null]],"^U",1,"^T",81,"^1=",true,"^V",81,"^16",4,"^17",true,"^Y",["^Z",["^[",["^Z",[["^2L","^2M"]]]]],"^1>","Takes the name of a spec/predicate-returning multimethod and a\n  tag-restoring keyword or fn (retag).  Returns a spec that when\n  conforming or explaining data will pass it to the multimethod to get\n  an appropriate spec. You can e.g. use multi-spec to dynamically and\n  extensibly associate specs with 'tagged' data (i.e. data where one\n  of the fields indicates the shape of the rest of the structure).\n\n  (defmulti mspec :tag)\n\n  The methods should ignore their argument and return a predicate/spec:\n  (defmethod mspec :int [_] (s/keys :req-un [::tag ::i]))\n\n  retag is used during generation to retag generated values with\n  matching tags. retag can either be a keyword, at which key the\n  dispatch-tag will be assoc'ed, or a fn of generated value and\n  dispatch-tag that should return an appropriately retagged value.\n\n  Note that because the tags themselves comprise an open set,\n  the tag key spec cannot enumerate the values, but can e.g.\n  test for keyword?.\n\n  Note also that the dispatch values of the multimethod will be\n  included in the path, i.e. in reporting and gen overrides, even\n  though those values are not evident in the spec.\n"],"~$tuple",["^ ","^P",null,"^Q",["^ ","^R","^S","^W",16,"^18",["^ ","^12",true,"^16",2,"^13",[["^Z",["^19","^1:","^1<"]]],"^Y",["^Z",[["^19","^1:","~$&","^1<"]]],"^15",["^Z",[null]]],"^U",11,"^T",354,"^1=",true,"^V",354,"^Y",["^Z",["^[",["^Z",[["~$&","^1<"]]]]],"^1>","takes one or more preds and returns a spec for a tuple, a vector\n  where each element conforms to the corresponding pred. Each element\n  will be referred to in paths using its ordinal."],"^=","~$cljs.spec$macros/tuple","^12",true,"^R","cljs/spec.cljc","^W",16,"^18",["^ ","^12",true,"^16",2,"^13",[["^Z",["^19","^1:","^1<"]]],"^Y",["^Z",[["^19","^1:","~$&","^1<"]]],"^15",["^Z",[null]]],"^13",[["^Z",["^19","^1:","^1<"]]],"^14",null,"^15",["^Z",[null]],"^U",1,"^T",354,"^1=",true,"^V",354,"^16",2,"^17",true,"^Y",["^Z",[["^19","^1:","~$&","^1<"]]],"^1>","takes one or more preds and returns a spec for a tuple, a vector\n  where each element conforms to the corresponding pred. Each element\n  will be referred to in paths using its ordinal."],"^7",["^ ","^P",null,"^Q",["^ ","^R","^S","^T",497,"^U",11,"^V",497,"^W",17,"^1=",true,"^Y",["^Z",["^[",["^Z",[["~$spec","~$x"]]]]],"^1>","spec-checking assert expression. Returns x if x is valid? according\nto spec, else throws an error with explain-data plus ::failure of\n:assertion-failed.\nCan be disabled at either compile time or runtime:\nIf *compile-asserts* is false at compile time, compiles to x. Defaults\nto the negation value of the ':elide-asserts' compiler option, or true if\nnot set.\nIf (check-asserts?) is false at runtime, always returns x. Defaults to\nvalue of 'cljs.spec/*runtime-asserts*', or false if not set. You can\ntoggle check-asserts? with (check-asserts bool)."],"^=","~$cljs.spec$macros/assert","^12",false,"^R","cljs/spec.cljc","^W",17,"^13",["^Z",[["^19","^1:","^2Q","~$x"]]],"^14",null,"^15",["^Z",[null,null]],"^U",1,"^T",497,"^1=",true,"^V",497,"^16",4,"^17",true,"^Y",["^Z",["^[",["^Z",[["^2Q","~$x"]]]]],"^1>","spec-checking assert expression. Returns x if x is valid? according\nto spec, else throws an error with explain-data plus ::failure of\n:assertion-failed.\nCan be disabled at either compile time or runtime:\nIf *compile-asserts* is false at compile time, compiles to x. Defaults\nto the negation value of the ':elide-asserts' compiler option, or true if\nnot set.\nIf (check-asserts?) is false at runtime, always returns x. Defaults to\nvalue of 'cljs.spec/*runtime-asserts*', or false if not set. You can\ntoggle check-asserts? with (check-asserts bool)."],"~$?",["^ ","^P",null,"^Q",["^ ","^R","^S","^T",279,"^U",11,"^V",279,"^W",12,"^1=",true,"^Y",["^Z",["^[",["^Z",[["^27"]]]]],"^1>","Returns a regex op that matches zero or one value matching\n  pred. Produces a single value (not a collection) if matched."],"^=","~$cljs.spec$macros/?","^12",false,"^R","cljs/spec.cljc","^W",12,"^13",["^Z",[["^19","^1:","^27"]]],"^14",null,"^15",["^Z",[null,null]],"^U",1,"^T",279,"^1=",true,"^V",279,"^16",3,"^17",true,"^Y",["^Z",["^[",["^Z",[["^27"]]]]],"^1>","Returns a regex op that matches zero or one value matching\n  pred. Produces a single value (not a collection) if matched."],"~$ns-qualify",["^ ","^P",null,"^Q",["^ ","^R","^S","^T",43,"^U",8,"^V",43,"^W",18,"^X",true,"^Y",["^Z",["^[",["^Z",[["^J","~$s"]]]]],"^1>","Qualify symbol s by resolving it or using the current *ns*."],"^X",true,"^=","~$cljs.spec$macros/ns-qualify","^12",false,"^R","cljs/spec.cljc","^W",18,"^13",["^Z",[["^J","~$s"]]],"^14",null,"^15",["^Z",[null,null]],"^U",1,"^T",43,"^V",43,"^16",2,"^17",true,"^Y",["^Z",["^[",["^Z",[["^J","~$s"]]]]],"^1>","Qualify symbol s by resolving it or using the current *ns*."],"^8",["^ ","^P",null,"^Q",["^ ","^R","^S","^W",16,"^18",["^ ","^12",true,"^16",2,"^13",[["^Z",["^19","^1:","~$pred-forms"]]],"^Y",["^Z",[["^19","^1:","~$&","^2V"]]],"^15",["^Z",[null]]],"^U",11,"^T",463,"^1=",true,"^V",463,"^Y",["^Z",["^[",["^Z",[["~$&","^2V"]]]]],"^1>","Takes map-validating specs (e.g. 'keys' specs) and\n  returns a spec that returns a conformed map satisfying all of the\n  specs.  Successive conformed values propagate through rest of\n  predicates. Unlike 'and', merge can generate maps satisfying the\n  union of the predicates."],"^=","~$cljs.spec$macros/merge","^12",true,"^R","cljs/spec.cljc","^W",16,"^18",["^ ","^12",true,"^16",2,"^13",[["^Z",["^19","^1:","^2V"]]],"^Y",["^Z",[["^19","^1:","~$&","^2V"]]],"^15",["^Z",[null]]],"^13",[["^Z",["^19","^1:","^2V"]]],"^14",null,"^15",["^Z",[null]],"^U",1,"^T",463,"^1=",true,"^V",463,"^16",2,"^17",true,"^Y",["^Z",[["^19","^1:","~$&","^2V"]]],"^1>","Takes map-validating specs (e.g. 'keys' specs) and\n  returns a spec that returns a conformed map satisfying all of the\n  specs.  Successive conformed values propagate through rest of\n  predicates. Unlike 'and', merge can generate maps satisfying the\n  union of the predicates."],"~$conformer",["^ ","^P",null,"^Q",["^ ","^R","^S","^W",20,"^18",["^ ","^12",false,"^16",4,"^13",["^Z",[["^19","^1:","~$f"],["^19","^1:","~$f","~$unf"]]],"^Y",["^Z",[["^19","^1:","~$f"],["^19","^1:","~$f","^2Y"]]],"^15",["^Z",[null,null]]],"^U",11,"^T",326,"^1=",true,"^V",326,"^Y",["^Z",["^[",["^Z",[["~$f"],["~$f","^2Y"]]]]],"^1>","takes a predicate function with the semantics of conform i.e. it should return either a\n  (possibly converted) value or :cljs.spec/invalid, and returns a\n  spec that uses it as a predicate/conformer. Optionally takes a\n  second fn that does unform of result of first"],"^=","~$cljs.spec$macros/conformer","^12",false,"^R","cljs/spec.cljc","^W",20,"^18",["^ ","^12",false,"^16",4,"^13",["^Z",[["^19","^1:","~$f"],["^19","^1:","~$f","^2Y"]]],"^Y",["^Z",[["^19","^1:","~$f"],["^19","^1:","~$f","^2Y"]]],"^15",["^Z",[null,null]]],"^13",["^Z",[["^19","^1:","~$f"],["^19","^1:","~$f","^2Y"]]],"^14",null,"^15",["^Z",[null,null]],"^U",1,"^T",326,"^1=",true,"^V",326,"^16",4,"^17",true,"^Y",["^Z",[["^19","^1:","~$f"],["^19","^1:","~$f","^2Y"]]],"^1>","takes a predicate function with the semantics of conform i.e. it should return either a\n  (possibly converted) value or :cljs.spec/invalid, and returns a\n  spec that uses it as a predicate/conformer. Optionally takes a\n  second fn that does unform of result of first"],"^2Q",["^ ","^P",null,"^Q",["^ ","^R","^S","^W",15,"^18",["^ ","^12",true,"^16",3,"^13",[["^Z",["^19","^1:","^10",["^ ","^1A",["^F"]]]]],"^Y",["^Z",[["^19","^1:","^10","~$&",["^ ","^1A",["^F"]]]]],"^15",["^Z",[null]]],"^U",11,"^T",62,"^1=",true,"^V",62,"^Y",["^Z",["^[",["^Z",[["^10","~$&",["^ ","^1A",["^F"]]]]]]],"^1>","Takes a single predicate form, e.g. can be the name of a predicate,\n  like even?, or a fn literal like #(< % 42). Note that it is not\n  generally necessary to wrap predicates in spec when using the rest\n  of the spec macros, only to attach a unique generator\n\n  Can also be passed the result of one of the regex ops -\n  cat, alt, *, +, ?, in which case it will return a regex-conforming\n  spec, useful when nesting an independent regex.\n  ---\n\n  Optionally takes :gen generator-fn, which must be a fn of no args that\n  returns a test.check generator.\n\n  Returns a spec."],"^=","~$cljs.spec$macros/spec","^12",true,"^R","cljs/spec.cljc","^W",15,"^18",["^ ","^12",true,"^16",3,"^13",[["^Z",["^19","^1:","^10",["^ ","^1A",["^F"]]]]],"^Y",["^Z",[["^19","^1:","^10","~$&",["^ ","^1A",["^F"]]]]],"^15",["^Z",[null]]],"^13",[["^Z",["^19","^1:","^10",["^ ","^1A",["^F"]]]]],"^14",null,"^15",["^Z",[null]],"^U",1,"^T",62,"^1=",true,"^V",62,"^16",3,"^17",true,"^Y",["^Z",[["^19","^1:","^10","~$&",["^ ","^1A",["^F"]]]]],"^1>","Takes a single predicate form, e.g. can be the name of a predicate,\n  like even?, or a fn literal like #(< % 42). Note that it is not\n  generally necessary to wrap predicates in spec when using the rest\n  of the spec macros, only to attach a unique generator\n\n  Can also be passed the result of one of the regex ops -\n  cat, alt, *, +, ?, in which case it will return a regex-conforming\n  spec, useful when nesting an independent regex.\n  ---\n\n  Optionally takes :gen generator-fn, which must be a fn of no args that\n  returns a test.check generator.\n\n  Returns a spec."],"~$init-compile-asserts",["^ ","^P",null,"^Q",["^ ","^R","^S","^T",493,"^U",21,"^V",493,"^W",41,"^X",true,"^1=",true,"^Y",["^Z",["^[",["^Z",[[]]]]]],"^X",true,"^=","~$cljs.spec$macros/init-compile-asserts","^12",false,"^R","cljs/spec.cljc","^W",41,"^13",["^Z",[["^19","^1:"]]],"^14",null,"^15",["^Z",[null,null]],"^U",1,"^T",493,"^1=",true,"^V",493,"^16",2,"^17",true,"^Y",["^Z",["^[",["^Z",[[]]]]]],"^9",["^ ","^P",null,"^Q",["^ ","^R","^S","^W",15,"^18",["^ ","^12",true,"^16",2,"^13",[["^Z",["^19","^1:",["^ ","^1A",["~$req","~$req-un","~$opt","~$opt-un","^F"]]]]],"^Y",["^Z",[["^19","^1:","~$&",["^ ","^1A",["^32","^33","^34","^35","^F"]]]]],"^15",["^Z",[null]]],"^U",11,"^T",110,"^1=",true,"^V",110,"^Y",["^Z",["^[",["^Z",[["~$&",["^ ","^1A",["^32","^33","^34","^35","^F"]]]]]]],"^1>","Creates and returns a map validating spec. :req and :opt are both\n  vectors of namespaced-qualified keywords. The validator will ensure\n  the :req keys are present. The :opt keys serve as documentation and\n  may be used by the generator.\n\n  The :req key vector supports 'and' and 'or' for key groups:\n\n  (s/keys :req [::x ::y (or ::secret (and ::user ::pwd))] :opt [::z])\n\n  There are also -un versions of :req and :opt. These allow\n  you to connect unqualified keys to specs.  In each case, fully\n  qualfied keywords are passed, which name the specs, but unqualified\n  keys (with the same name component) are expected and checked at\n  conform-time, and generated during gen:\n\n  (s/keys :req-un [:my.ns/x :my.ns/y])\n\n  The above says keys :x and :y are required, and will be validated\n  and generated by specs (if they exist) named :my.ns/x :my.ns/y\n  respectively.\n\n  In addition, the values of *all* namespace-qualified keys will be validated\n  (and possibly destructured) by any registered specs. Note: there is\n  no support for inline value specification, by design.\n\n  Optionally takes :gen generator-fn, which must be a fn of no args that\n  returns a test.check generator."],"^=","~$cljs.spec$macros/keys","^12",true,"^R","cljs/spec.cljc","^W",15,"^18",["^ ","^12",true,"^16",2,"^13",[["^Z",["^19","^1:",["^ ","^1A",["^32","^33","^34","^35","^F"]]]]],"^Y",["^Z",[["^19","^1:","~$&",["^ ","^1A",["^32","^33","^34","^35","^F"]]]]],"^15",["^Z",[null]]],"^13",[["^Z",["^19","^1:",["^ ","^1A",["^32","^33","^34","^35","^F"]]]]],"^14",null,"^15",["^Z",[null]],"^U",1,"^T",110,"^1=",true,"^V",110,"^16",2,"^17",true,"^Y",["^Z",[["^19","^1:","~$&",["^ ","^1A",["^32","^33","^34","^35","^F"]]]]],"^1>","Creates and returns a map validating spec. :req and :opt are both\n  vectors of namespaced-qualified keywords. The validator will ensure\n  the :req keys are present. The :opt keys serve as documentation and\n  may be used by the generator.\n\n  The :req key vector supports 'and' and 'or' for key groups:\n\n  (s/keys :req [::x ::y (or ::secret (and ::user ::pwd))] :opt [::z])\n\n  There are also -un versions of :req and :opt. These allow\n  you to connect unqualified keys to specs.  In each case, fully\n  qualfied keywords are passed, which name the specs, but unqualified\n  keys (with the same name component) are expected and checked at\n  conform-time, and generated during gen:\n\n  (s/keys :req-un [:my.ns/x :my.ns/y])\n\n  The above says keys :x and :y are required, and will be validated\n  and generated by specs (if they exist) named :my.ns/x :my.ns/y\n  respectively.\n\n  In addition, the values of *all* namespace-qualified keys will be validated\n  (and possibly destructured) by any registered specs. Note: there is\n  no support for inline value specification, by design.\n\n  Optionally takes :gen generator-fn, which must be a fn of no args that\n  returns a test.check generator."],"~$+",["^ ","^P",null,"^Q",["^ ","^R","^S","^T",273,"^U",11,"^V",273,"^W",12,"^1=",true,"^Y",["^Z",["^[",["^Z",[["^27"]]]]],"^1>","Returns a regex op that matches one or more values matching\n  pred. Produces a vector of matches"],"^=","~$cljs.spec$macros/+","^12",false,"^R","cljs/spec.cljc","^W",12,"^13",["^Z",[["^19","^1:","^27"]]],"^14",null,"^15",["^Z",[null,null]],"^U",1,"^T",273,"^1=",true,"^V",273,"^16",3,"^17",true,"^Y",["^Z",["^[",["^Z",[["^27"]]]]],"^1>","Returns a regex op that matches one or more values matching\n  pred. Produces a vector of matches"],"~$map-of",["^ ","^P",null,"^Q",["^ ","^R","^S","^W",17,"^18",["^ ","^12",true,"^16",4,"^13",[["^Z",["^19","^1:","^2:","^2;","^1I"]]],"^Y",["^Z",[["^19","^1:","^2:","^2;","~$&","^1I"]]],"^15",["^Z",[null]]],"^U",11,"^T",254,"^1=",true,"^V",254,"^Y",["^Z",["^[",["^Z",[["^2:","^2;","~$&","^1I"]]]]],"^1>","Returns a spec for a map whose keys satisfy kpred and vals satisfy\n  vpred. Unlike 'every-kv', map-of will exhaustively conform every\n  value.\n\n  Same options as 'every', :kind defaults to map?, with the addition of:\n\n  :conform-keys - conform keys as well as values (default false)\n\n  See also - every-kv"],"^=","~$cljs.spec$macros/map-of","^12",true,"^R","cljs/spec.cljc","^W",17,"^18",["^ ","^12",true,"^16",4,"^13",[["^Z",["^19","^1:","^2:","^2;","^1I"]]],"^Y",["^Z",[["^19","^1:","^2:","^2;","~$&","^1I"]]],"^15",["^Z",[null]]],"^13",[["^Z",["^19","^1:","^2:","^2;","^1I"]]],"^14",null,"^15",["^Z",[null]],"^U",1,"^T",254,"^1=",true,"^V",254,"^16",4,"^17",true,"^Y",["^Z",[["^19","^1:","^2:","^2;","~$&","^1I"]]],"^1>","Returns a spec for a map whose keys satisfy kpred and vals satisfy\n  vpred. Unlike 'every-kv', map-of will exhaustively conform every\n  value.\n\n  Same options as 'every', :kind defaults to map?, with the addition of:\n\n  :conform-keys - conform keys as well as values (default false)\n\n  See also - every-kv"],"~$double-in",["^ ","^P",null,"^Q",["^ ","^R","^S","^W",20,"^18",["^ ","^12",true,"^16",2,"^13",[["^Z",["^19","^1:",["^ ","^1H","~$m","~:or",["^ ","~$NaN?",true,"~$infinite?",true],"^1A",["^3=","^3<","~$min","~$max"]]]]],"^Y",["^Z",[["^19","^1:","~$&",["^ ","^1H","~$m","^3;",["^ ","^3<",true,"^3=",true],"^1A",["^3=","^3<","^3>","^3?"]]]]],"^15",["^Z",[null]]],"^U",11,"^T",446,"^1=",true,"^V",446,"^Y",["^Z",["^[",["^Z",[["~$&",["^ ","^1H","~$m","^3;",["^ ","^3<",true,"^3=",true],"^1A",["^3=","^3<","^3>","^3?"]]]]]]],"^1>","Specs a 64-bit floating point number. Options:\n\n    :infinite? - whether +/- infinity allowed (default true)\n    :NaN?      - whether NaN allowed (default true)\n    :min       - minimum value (inclusive, default none)\n    :max       - maximum value (inclusive, default none)"],"^=","~$cljs.spec$macros/double-in","^12",true,"^R","cljs/spec.cljc","^W",20,"^18",["^ ","^12",true,"^16",2,"^13",[["^Z",["^19","^1:",["^ ","^1H","~$m","^3;",["^ ","^3<",true,"^3=",true],"^1A",["^3=","^3<","^3>","^3?"]]]]],"^Y",["^Z",[["^19","^1:","~$&",["^ ","^1H","~$m","^3;",["^ ","^3<",true,"^3=",true],"^1A",["^3=","^3<","^3>","^3?"]]]]],"^15",["^Z",[null]]],"^13",[["^Z",["^19","^1:",["^ ","^1H","~$m","^3;",["^ ","^3<",true,"^3=",true],"^1A",["^3=","^3<","^3>","^3?"]]]]],"^14",null,"^15",["^Z",[null]],"^U",1,"^T",446,"^1=",true,"^V",446,"^16",2,"^17",true,"^Y",["^Z",[["^19","^1:","~$&",["^ ","^1H","~$m","^3;",["^ ","^3<",true,"^3=",true],"^1A",["^3=","^3<","^3>","^3?"]]]]],"^1>","Specs a 64-bit floating point number. Options:\n\n    :infinite? - whether +/- infinity allowed (default true)\n    :NaN?      - whether NaN allowed (default true)\n    :min       - minimum value (inclusive, default none)\n    :max       - maximum value (inclusive, default none)"],"~$inst-in",["^ ","^P",null,"^Q",["^ ","^R","^S","^T",427,"^U",11,"^V",427,"^W",18,"^1=",true,"^Y",["^Z",["^[",["^Z",[["^2>","^2?"]]]]],"^1>","Returns a spec that validates insts in the range from start\n  (inclusive) to end (exclusive)."],"^=","~$cljs.spec$macros/inst-in","^12",false,"^R","cljs/spec.cljc","^W",18,"^13",["^Z",[["^19","^1:","^2>","^2?"]]],"^14",null,"^15",["^Z",[null,null]],"^U",1,"^T",427,"^1=",true,"^V",427,"^16",4,"^17",true,"^Y",["^Z",["^[",["^Z",[["^2>","^2?"]]]]],"^1>","Returns a spec that validates insts in the range from start\n  (inclusive) to end (exclusive)."],"^;",["^ ","^P",null,"^Q",["^ ","^R","^S","^W",14,"^18",["^ ","^12",true,"^16",2,"^13",[["^Z",["^19","^1:","^2V"]]],"^Y",["^Z",[["^19","^1:","~$&","^2V"]]],"^15",["^Z",[null]]],"^U",11,"^T",187,"^1=",true,"^V",187,"^Y",["^Z",["^[",["^Z",[["~$&","^2V"]]]]],"^1>","Takes predicate/spec-forms, e.g.\n\n  (s/and even? #(< % 42))\n\n  Returns a spec that returns the conformed value. Successive\n  conformed values propagate through rest of predicates."],"^=","~$cljs.spec$macros/and","^12",true,"^R","cljs/spec.cljc","^W",14,"^18",["^ ","^12",true,"^16",2,"^13",[["^Z",["^19","^1:","^2V"]]],"^Y",["^Z",[["^19","^1:","~$&","^2V"]]],"^15",["^Z",[null]]],"^13",[["^Z",["^19","^1:","^2V"]]],"^14",null,"^15",["^Z",[null]],"^U",1,"^T",187,"^1=",true,"^V",187,"^16",2,"^17",true,"^Y",["^Z",[["^19","^1:","~$&","^2V"]]],"^1>","Takes predicate/spec-forms, e.g.\n\n  (s/and even? #(< % 42))\n\n  Returns a spec that returns the conformed value. Successive\n  conformed values propagate through rest of predicates."],"^<",["^ ","^P",null,"^Q",["^ ","^R","^S","^T",52,"^U",11,"^V",52,"^W",14,"^1=",true,"^Y",["^Z",["^[",["^Z",[["~$k","~$spec-form"]]]]],"^1>","Given a namespace-qualified keyword or resolveable symbol k, and a spec,\n   spec-name, predicate or regex-op makes an entry in the registry mapping k to\n   the spec"],"^=","~$cljs.spec$macros/def","^12",false,"^R","cljs/spec.cljc","^W",14,"^13",["^Z",[["^19","^1:","~$k","^3D"]]],"^14",null,"^15",["^Z",[null,null]],"^U",1,"^T",52,"^1=",true,"^V",52,"^16",4,"^17",true,"^Y",["^Z",["^[",["^Z",[["~$k","^3D"]]]]],"^1>","Given a namespace-qualified keyword or resolveable symbol k, and a spec,\n   spec-name, predicate or regex-op makes an entry in the registry mapping k to\n   the spec"],"~$fdef",["^ ","^P",null,"^Q",["^ ","^R","^S","^W",15,"^18",["^ ","^12",true,"^16",3,"^13",[["^Z",["^19","^1:","~$fn-sym","~$specs"]]],"^Y",["^Z",[["^19","^1:","^3G","~$&","^3H"]]],"^15",["^Z",[null]]],"^U",11,"^T",367,"^1=",true,"^V",367,"^Y",["^Z",["^[",["^Z",[["^3G","~$&","^3H"]]]]],"^1>","Takes a symbol naming a function, and one or more of the following:\n\n  :args A regex spec for the function arguments as they were a list to be\n    passed to apply - in this way, a single spec can handle functions with\n    multiple arities\n  :ret A spec for the function's return value\n  :fn A spec of the relationship between args and ret - the\n    value passed is {:args conformed-args :ret conformed-ret} and is\n    expected to contain predicates that relate those values\n\n  Qualifies fn-sym with resolve, or using *ns* if no resolution found.\n  Registers an fspec in the global registry, where it can be retrieved\n  by calling get-spec with the var or full-qualified symbol.\n\n  Once registered, function specs are included in doc, checked by\n  instrument, tested by the runner clojure.spec.test/run-tests, and (if\n  a macro) used to explain errors during macroexpansion.\n\n  Note that :fn specs require the presence of :args and :ret specs to\n  conform values, and so :fn specs will be ignored if :args or :ret\n  are missing.\n\n  Returns the qualified fn-sym.\n\n  For example, to register function specs for the symbol function:\n\n  (s/fdef clojure.core/symbol\n    :args (s/alt :separate (s/cat :ns string? :n string?)\n                 :str string?\n                 :sym symbol?)\n    :ret symbol?)"],"^=","~$cljs.spec$macros/fdef","^12",true,"^R","cljs/spec.cljc","^W",15,"^18",["^ ","^12",true,"^16",3,"^13",[["^Z",["^19","^1:","^3G","^3H"]]],"^Y",["^Z",[["^19","^1:","^3G","~$&","^3H"]]],"^15",["^Z",[null]]],"^13",[["^Z",["^19","^1:","^3G","^3H"]]],"^14",null,"^15",["^Z",[null]],"^U",1,"^T",367,"^1=",true,"^V",367,"^16",3,"^17",true,"^Y",["^Z",[["^19","^1:","^3G","~$&","^3H"]]],"^1>","Takes a symbol naming a function, and one or more of the following:\n\n  :args A regex spec for the function arguments as they were a list to be\n    passed to apply - in this way, a single spec can handle functions with\n    multiple arities\n  :ret A spec for the function's return value\n  :fn A spec of the relationship between args and ret - the\n    value passed is {:args conformed-args :ret conformed-ret} and is\n    expected to contain predicates that relate those values\n\n  Qualifies fn-sym with resolve, or using *ns* if no resolution found.\n  Registers an fspec in the global registry, where it can be retrieved\n  by calling get-spec with the var or full-qualified symbol.\n\n  Once registered, function specs are included in doc, checked by\n  instrument, tested by the runner clojure.spec.test/run-tests, and (if\n  a macro) used to explain errors during macroexpansion.\n\n  Note that :fn specs require the presence of :args and :ret specs to\n  conform values, and so :fn specs will be ignored if :args or :ret\n  are missing.\n\n  Returns the qualified fn-sym.\n\n  For example, to register function specs for the symbol function:\n\n  (s/fdef clojure.core/symbol\n    :args (s/alt :separate (s/cat :ns string? :n string?)\n                 :str string?\n                 :sym symbol?)\n    :ret symbol?)"]],"~:require-macros",["^ "],"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~$st__20__auto__","^10","~$cljs.spec/or-spec-impl","^O","^1M","~:args","~$&","~$mkdate__22__auto__","~$args__36__auto__","~:req-un","~:opt-un","~$x","~$cljs.spec/keys","^1@","^2?","^3B","~$cljs.spec/get-spec","~$cljs.spec/spec","~$p1__27#","^1F","^3@","~:min","^1S","~:ret","~:gfn","^2W","^2D","~$cljs.core/keyword?","~:pred-exprs","~$mspec__17__auto__","~$cljs.spec/cat-impl","~:into","~$p1__29__30__auto__","~:gen-max","^3D","^1V","~$i__11__auto__","~:fn","^2E","~$cljs.spec/gen","~$p1__6__7__auto__","^2G","~$cljs.spec/with-gen","^3<","~$cljs.spec/int-in-range?","~$cljs.core/dec","~:opt-keys","~$v__12__auto__","~$cljs.spec.impl.gen/fmap","^3G","^1X","^1Z","~$et__21__auto__","~$p1__28#","^34","^X","^20","~:else","~:gen","~:cljs.spec/k","^39","^33","^35","~$js/Date.","~$cljs.spec.impl.gen/sample","~$cljs.core/apply","^2L","^1B","^2N","~$cljs.core/int?","^23","~$f__35__auto__","^5","~:ns","~:elide-asserts","~$m__18__auto__","^=","~:cljs.spec/kfn","~$cljs.core/double?","^1H","^19","^12","~$*","^3>","~$p1__25__26__auto__","^1C","~:req-specs","^3;","^1P","^2Z","^2S","^R","~$cljs.core/concat","^1J","^W","^3I","^18","^3E","^1D","~$cljs.spec/and-spec-impl","^1?","^11","^2[","~$cljs.core/inst-ms","^1G","^13","^F","^36","^29","^2=","^2A","~$cljs.core/contains?","~$cljs.spec/fspec-impl","~$cljs.core/map?","^31","~:cljs.spec/conform-all","~$cljs.spec/*runtime-asserts*","~$p1__31__32__auto__","^2C","^>","~:cljs.spec/pred","~$cljs.core/inst?","~$if","^15","~:cljs.spec/nil","~$%","~$cljs.spec/conformer","~:distinct","^U","^2;","~$cljs.spec/*compile-asserts*","^6","~:infinite?","~$cljs.spec/spec-impl","~$cljs.spec/*","~$n","^27","^2F","~$m","~$cljs.core/let","^1;","^2B","^1<","~$cljs.spec.impl.gen/large-integer*","~$cljs.spec/amp-impl","~:req","^2:","^2H","~:gen-into","^1A","~$cljs.spec/inst-in-range?","^2>","^22","^3C","^2K","~$cljs.spec/every-impl","^T","^2O","~$cljs.spec/merge-spec-impl","~$d__23__auto__","~$fn*","~$js/isNaN","~$not","^2Y","~$cljs.core/<=","~$cljs.spec/def","^1=","~:max","^26","^J","^24","~$cljs.spec/maybe-impl","~:min-count","~:kind","^1T","~$cljs.spec/rep-impl","^7","^1R","~$s","~:count","~$cljs.core/for","~$cljs.core/nil?","^1:","~:req-keys","~$cljs.core/nth","^2M","~$k","^2I","^37","~$?","~$cljs.core/fn","^1O","^1U","~$cljs.core/second","~:opt-specs","^2T","^8","^2X","^V","^3=","^1W","~$cljs.spec/and","~:cljs.spec/kind-form","~$cljs.spec/cat","~:pred-forms","~$cljs.spec/def-impl","^32","~$cljs.spec/every","^2Q","^30","^2R","^9","~$cljs.spec/alt-impl","^16","^1[","~:options","~:max-count","~$cljs.spec/or","^2@","^2<","^1Y","^1Q","~$+","~$var","~$cljs.spec/every-kv","^[","^2U","~$cljs.spec/tuple-impl","~$fspec__34__auto__","^38","^Y","^21","^25","~$cljs.spec/fspec","^3?","^1>","^3H","~$cljs.spec/tuple","~$cljs.spec/multi-spec-impl","^1L","^1E","^1N","^1I","^1K","~$p1__19__24__auto__","~:cljs.spec/v","~:NaN?","^28","^3:","~$cljs.spec/exercise-fn","^3A","~$cljs.spec/map-spec-impl","~:test","~$cljs.spec/assert*","~$cljs.core/any?","^;","^2J","~$cljs.spec/rep+impl","~$cljs.spec.impl.gen/double*","~:cljs.spec/kvs->map","^<","~:opt","^2P","^3F","^2V","~$f"]],"~:order",["^1Y","^4J","^=","^R","^W","^U","^T","^V","^Y","^1>","^6=","^>","^1X","^2D","^X","^2C","~$x","~$%","^1D","^22","^20","^21","^4B","^11","^O","^J","^10","^2U","^2T","~$s","^5W","^[","^3E","^1=","^<","~$k","^3D","^2[","^18","^2Q","^12","^16","^13","^15","^19","^1:","^1A","^F","~$&","^4C","^56","^67","^61","^2N","^2K","^2L","^2M","^36","^9","^32","^33","^34","^35","^6C","^3R","^3S","^5;","^5A","^49","^4T","^4V","^6<","^3Z","^40","^4=","^4P","^5N","^5R","^5V","^2E","^6","^25","^3N","^3C","^;","^2V","^4R","^1R","^1F","^1G","^1H","^1I","^1J","^1K","^1L","^1M","^1N","^1O","^1P","^1Q","^5[","^45","^43","^53","^5<","^5K","^5H","^5I","^5T","^5>","^2<","^29","^2:","^2;","^5X","^66","^4M","^5P","^46","^4>","^5O","^24","^23","^4W","^39","^38","^62","^5J","^28","~$*","^27","^6@","^37","~$+","^5G","^2S","~$?","^2B","^2A","^5Y","^26","^5","^42","^1?","^1;","^1<","^5:","^2Z","^2X","~$f","^2Y","^1E","^1@","^1B","^1C","^3O","^3Y","^47","^4U","^3V","^2P","^2O","^63","^2G","^2F","^1W","^1V","^3I","^3F","^3G","^3H","^5E","^65","^1U","^1S","^1T","^58","^41","^3T","^4:","^57","^5U","^4D","^3[","^69","^6?","^6B","^4?","^4L","^4G","^4Q","^48","^5S","^60","^51","^5M","^4Z","^52","^5Q","^1[","^1Z","^3M","^4S","^4@","^3P","^5@","^4E","^4[","^68","^5=","^59","^3X","^5F","^3B","^3A","^2>","^2?","^4H","^4O","^4;","^4<","^2@","^2=","^3@","^3:","^3;","~$m","^3<","^3=","^3>","^3?","^6:","^55","^4N","^3W","^5C","^4A","^5B","^44","^5D","^4Y","^6A","^2W","^8","^5?","^2J","^2H","^2I","~$n","^6;","^64","^3U","^4I","^5L","^3Q","^4F","^4K","^5Z","^31","^30","^50","^54","^4X","^6>","^2R","^7"]],"^1>",null]